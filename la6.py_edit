from typing import Optional
from data import Book
# Write your functions for each part in the space below.

# Part 0

# Finds the index of the smallest value in the list, if there are values,
#     starting from the provided index (if in bounds).
# input: a list of integers
# input: a starting index
# returns: index of smallest value as an int or None if no value is found
def index_smallest_from(values:list[int], start:int) -> Optional[int]:
    if start >= len(values) or start < 0:
        return None

    mindex = start
    for idx in range(start + 1, len(values)):
        if values[idx] < values[mindex]:
            mindex = idx

    return mindex

def selection_sort(values:list[int]) -> None:
    for idx in range(len(values) - 1):
        mindex = index_smallest_from(values, idx)
        tmp = values[mindex]
        values[mindex] = values[idx]
        values[idx] = tmp


# Part 1
def book_sort(books: list[Book], start: int):
    if start >= len(books) or start < 0:
        return None

    mindex = start
    for idx in range(start + 1, len(books)):
        if books[idx].title < books[mindex].title:
            mindex = idx

    return mindex


# Function to perform selection sort on a list of books
def selection_sort_books(books: list[Book]) -> None:
    for idx in range(len(books) - 1):
        mindex = book_sort(books, idx)
        if mindex is not None:
            books[idx], books[mindex] = books[mindex], books[idx]

# Part 2
# Function to swap the case of each character in a string
def swap_case(input: str) -> str:
    result = []
    for char in input:
        if char.islower():
            result.append(char.upper())
        elif char.isupper():
            result.append(char.lower())
    return ''.join(result)

# Part 3
# Function to translate characters in a string from old to new
def translate(input: str, old: str, new: str) -> str:
    result = []
    for char in input:
        if char == old:
            result.append(new)
        else:
            result.append(char)
    return ''.join(result)

# Part 4
# Function to create a histogram of word occurrences in a string
def histogram(input: str) -> dict:
    count = {}
    words = input.split()

    for word in words:
        if word in count:
            count[word] += 1
        else:
            count[word] = 1
    return count
